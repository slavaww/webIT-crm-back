# app/config/packages/security.yaml
security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    # Порядок файрволов очень важен
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Файрвол для получения JWT и создания сессии
        login:
            pattern: ^/api/login
            stateless: true
            methods: [POST]
            json_login:
                check_path: /api/login
                # ИСПОЛЬЗУЕМ НАШ КАСТОМНЫЙ ОБРАБОТЧИК
                success_handler: App\Security\AuthenticationSuccessHandler
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Файрвол для защиты остального API с помощью JWT
        api:
            pattern: ^/api
            stateless: true
            jwt: ~

        # ОСНОВНОЙ ФАЙРВОЛ ДЛЯ TWIG-СТРАНИЦ (админка, SPA-загрузчик)
        # Он STATEFUL (работает с сессиями)
        main:
            pattern: ^/
            lazy: true
            provider: app_user_provider
            # Этот файрвол будет проверять сессионные cookie
            
            # Указываем, как выйти из сессии
            logout:
                path: /logout # Можете создать роут для этого или React будет делать это через удаление токена
                # path: app_logout # Можете создать роут для этого или React будет делать это через удаление токена
                target: / # Куда перенаправить после выхода

    access_control:
        # Публичный доступ к API логина
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        # Все остальное API требует JWT
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

        # Защита админ-панели. Теперь она будет работать, т.к. файрвол main ищет сессию.
        - { path: ^/settings, roles: ROLE_SUPER_ADMIN }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
